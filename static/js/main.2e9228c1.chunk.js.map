{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","alt","src","CardList","robots","map","user","idx","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"uLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCoBCQ,EAvBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,gCACI,6BAAKC,IACL,4BAAIC,WCkBLI,EAzBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAOf,OACI,8BAEQA,EAAOC,KACH,SAACC,EAAMC,GACH,OAAQ,cAAC,EAAD,CAEJV,GAAIO,EAAOG,GAAKV,GAChBC,KAAMM,EAAOG,GAAKT,KAClBC,MAAOK,EAAOG,GAAKR,OAHdK,EAAOG,GAAKV,UCD9BW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCEbI,EARA,SAACC,GACZ,OACI,sBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,SAAlE,UACKJ,EAAMK,SADX,QCyBOC,E,kDAzBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAQnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAM7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,+CAEAG,KAAKX,MAAMK,a,GApBFQ,aC+DbC,G,wDAnDX,aAAe,IAAD,8BACV,gBAqBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAtBzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAEhBG,MAAM,8CACD5C,MAAK,SAAA6C,GAAQ,OAAIA,EAASC,UAC1B9C,MAAK,SAAA+C,GAAK,OAAI,EAAKX,SAAS,CAACtB,OAAQiC,S,oBAe9C,WAAU,IAAD,OAECC,EAAiBb,KAAKJ,MAAMjB,OAAOmC,QACrC,SAAAC,GAAK,OAAIA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAEtE,OAAiC,IAA7BhB,KAAKJ,MAAMjB,OAAOuC,OACX,oBAAI3C,UAAU,QAAd,wBAGH,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQkC,e,GAjD5BX,cCClBiB,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAmBhD5D,M","file":"static/js/main.2e9228c1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\n// Card can accept parameters: properties of the Component\n// destructuring for easier usage\nconst Card = ({id, name, email}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\n// robohash: basically a web API that generates random images of robots\n// ?200x200 fixes the size to 200px by 200px\n\n// outer div: using tachyons classes: \n// tc: text centralised, light green backgrounds, dib (forgot), \n// br = border, pa = padding, ma = margins, grow = animation,\n// bw2 = border weight, shadows\n\n// to put JS syntax inside the HTML/JSX part, need to wrap in curly brackets\n// same for the src part, have to wrap in curly braces, then the `` for placeholders (template strings)\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    // if (true) {\n    //     throw new Error(\"EERRROOOOORRRR\");\n    // }\n    // for React, we need to provide a key={id} each time\n    // for DOM manipulation so that under the hood, they know which Card is added/removed and can update easily\n    // best if key is something that is unique, like id\n    return (\n        <div>\n            { // JS syntax\n                robots.map(\n                    (user, idx) => {\n                        return (<Card \n                            key={robots[idx].id} \n                            id={robots[idx].id} \n                            name={robots[idx].name} \n                            email={robots[idx].email}\n                            />)\n                    }\n                )\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange = {searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox; \n\n// onChange is a HTML thing: will trigger when changed","import React from 'react';\n\n// manages children. wrap in a div and add styling where needed\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY:'scroll', border:'1px solid black', height:'500px'}}>\n            {props.children};\n        </div>\n    )\n}\n\nexport default Scroll;\n\n// what <div style= {{}}> means:\n// style = {} allows us to use JSX/javascript syntax in there\n// and the additional {} means we are writing an object in there","// integrate error boundary into robofriends\n\nimport React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    // the try-catcher\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    // ideally, we want to use error boundary as a try-catch:\n    // is some component fails, it will be caught\n    // so error boundary will more likely be a wrapper (like scroll)\n    render() {\n        if (this.state.hasError) {\n            return <h1>Error occured</h1>;\n        } else {\n            return this.props.children;\n        }\n\n    }\n}\n\nexport default ErrorBoundary;\n\n// if we throw error in cardlist, we will see the developmental error\n// but for the end user they will see the <h1> error </h1>","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\n// import {robots} from './robots'; // need to destructure because robots.js can contain multiple objects\nimport SearchBox from '../components/SearchBox'; \nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css'\n\nclass App extends Component {\n\n    // order of execution: \n    // constructor\n    // componentMount\n    // render\n    // componentDidMount\n\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        // update the state of robots here\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}));\n\n        // fetch does http fetch\n        // when there is a change to state/virtual DOM, render() will be executed again\n    }\n\n    // how to have dynamic updates to the robot states:\n    // pass this listener into the searchbox and update from there\n    // note that we have to use the anonymous function way to allow the reference of App to be saved in the function\n    // if the fn is passed to SearchBox, the 'this' in the function may not refer to App anymore\n    onSearchChange = (event) => {\n        // update searchField\n        this.setState({searchField: event.target.value});\n    }\n\n    render() {\n        // filter robots\n        const filteredRobots = this.state.robots.filter(\n            robot => robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n        )\n        if (this.state.robots.length === 0) {\n            return <h1 className='f1 tc'>Loading...</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends!</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll> \n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n        // Scroll: scroll makes the cardlist of filtered robots scrollable\n    }\n}\n\nexport default App;\n\n\n// STATE vs PROPS\n/**\n * props are attributes or constants fed to child properties\n * states come from the parents and are mutable\n */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // needs to specify filepath\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; // installed via npm. Useful classes for HTML tags\nimport App from './containers/App'; // if no extension specified, assume is .js file\n// import Hello from './Hello'; // from previous lessons\n\n// App is the main parent JS file that contains the children\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// 'greeting' is a property that we can add for class tags\n// this will be available in Hello.js for us to use\n// ReactDOM.render(\n//   <Hello greeting={'React Ninja'}/>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}